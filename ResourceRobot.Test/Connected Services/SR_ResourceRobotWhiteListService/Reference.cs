//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace ResourceRobot.Test.SR_ResourceRobotWhiteListService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SR_ResourceRobotWhiteListService.IWhiteListService")]
    public interface IWhiteListService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWhiteListService/GetWhiteList", ReplyAction="http://tempuri.org/IWhiteListService/GetWhiteListResponse")]
        ResourceRobot.Channels.RobotReponse<System.Collections.Generic.List<string>> GetWhiteList(ResourceRobot.Channels.WhiteListRequest req);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWhiteListService/GetWhiteList", ReplyAction="http://tempuri.org/IWhiteListService/GetWhiteListResponse")]
        System.Threading.Tasks.Task<ResourceRobot.Channels.RobotReponse<System.Collections.Generic.List<string>>> GetWhiteListAsync(ResourceRobot.Channels.WhiteListRequest req);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWhiteListService/RegistWhiteListClient", ReplyAction="http://tempuri.org/IWhiteListService/RegistWhiteListClientResponse")]
        ResourceRobot.Channels.RobotReponse<bool> RegistWhiteListClient(ResourceRobot.Channels.RegistWhiteListRequest req);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWhiteListService/RegistWhiteListClient", ReplyAction="http://tempuri.org/IWhiteListService/RegistWhiteListClientResponse")]
        System.Threading.Tasks.Task<ResourceRobot.Channels.RobotReponse<bool>> RegistWhiteListClientAsync(ResourceRobot.Channels.RegistWhiteListRequest req);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWhiteListService/ReportException", ReplyAction="http://tempuri.org/IWhiteListService/ReportExceptionResponse")]
        ResourceRobot.Channels.RobotReponse<bool> ReportException(ResourceRobot.Channels.ReportExceptionRequest req);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWhiteListService/ReportException", ReplyAction="http://tempuri.org/IWhiteListService/ReportExceptionResponse")]
        System.Threading.Tasks.Task<ResourceRobot.Channels.RobotReponse<bool>> ReportExceptionAsync(ResourceRobot.Channels.ReportExceptionRequest req);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IWhiteListServiceChannel : ResourceRobot.Test.SR_ResourceRobotWhiteListService.IWhiteListService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WhiteListServiceClient : System.ServiceModel.ClientBase<ResourceRobot.Test.SR_ResourceRobotWhiteListService.IWhiteListService>, ResourceRobot.Test.SR_ResourceRobotWhiteListService.IWhiteListService {
        
        public WhiteListServiceClient() {
        }
        
        public WhiteListServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public WhiteListServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WhiteListServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WhiteListServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public ResourceRobot.Channels.RobotReponse<System.Collections.Generic.List<string>> GetWhiteList(ResourceRobot.Channels.WhiteListRequest req) {
            return base.Channel.GetWhiteList(req);
        }
        
        public System.Threading.Tasks.Task<ResourceRobot.Channels.RobotReponse<System.Collections.Generic.List<string>>> GetWhiteListAsync(ResourceRobot.Channels.WhiteListRequest req) {
            return base.Channel.GetWhiteListAsync(req);
        }
        
        public ResourceRobot.Channels.RobotReponse<bool> RegistWhiteListClient(ResourceRobot.Channels.RegistWhiteListRequest req) {
            return base.Channel.RegistWhiteListClient(req);
        }
        
        public System.Threading.Tasks.Task<ResourceRobot.Channels.RobotReponse<bool>> RegistWhiteListClientAsync(ResourceRobot.Channels.RegistWhiteListRequest req) {
            return base.Channel.RegistWhiteListClientAsync(req);
        }
        
        public ResourceRobot.Channels.RobotReponse<bool> ReportException(ResourceRobot.Channels.ReportExceptionRequest req) {
            return base.Channel.ReportException(req);
        }
        
        public System.Threading.Tasks.Task<ResourceRobot.Channels.RobotReponse<bool>> ReportExceptionAsync(ResourceRobot.Channels.ReportExceptionRequest req) {
            return base.Channel.ReportExceptionAsync(req);
        }
    }
}
